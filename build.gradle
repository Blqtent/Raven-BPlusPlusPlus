
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            url 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'java'

version = "1.2"
group = "keystrokesmod"
archivesBaseName = "[1.8.9] BetterKeystrokes V"

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.encoding 'UTF-8'
}

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"

    mappings = "stable_20"
    //clientJvmArgs += "-Dfml.coreMods.load=keystrokesmod.sToNkS.tweaker.FMLLoadingPlugin"
    clientJvmArgs += '-Dfml.coreMods.load=keystrokesmod.client.mixin.MixinLoader'
}

mixin {
    // The obfuscation environment to use when generating refMaps. This is the obfuscation which will end up in the mappings in the generated refMap.
    defaultObfuscationEnv searge // Types of obf env: searge, notch.
    // Sets the main sourceSets refmap name instead of add sourceSets.main so there is no conflict cause of it adding another value instead of setting the 1 value.
    sourceSets {
        main {
            ext.refMap = 'mixins.keystrokesmod.refmap.json'
        }
    }
}

repositories {
    // The mavenCentral() alias means that dependencies are fetched from the central Maven 2 repository (https://repo1.maven.org/maven2).
    mavenCentral()
    // The url to get the spongepowered dependencies from.
    maven {
        url 'https://repo.spongepowered.org/maven'
    }
}

configurations {
    // Adds a reference so that we extend/add on to it with depends so we can grab them and compile them into the jar.
    embed
    // Grabs what's extended/added on from/to embed and compiles it into the jar when being built.
    compile.extendsFrom embed
}

dependencies {
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    embed(fileTree(dir: "libs", include: "discord-rpc.jar"))

    embed('org.spongepowered:mixin:0.6-SNAPSHOT') {

        // Excludes unneeded stuff.
        exclude module: 'gson'
        exclude module: 'guava'
        exclude module: 'jarjar'
        exclude module: 'commons-codec'
        exclude module: 'commons-io'
        exclude module: 'launchwrapper'
        exclude module: 'asm-commons'
        exclude module: 'slf4j-api'
    }
    implementation 'org.jetbrains:annotations:22.0.0'
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/

/* -Dfml.coreMods.load=keystrokesmod.sToNkS.tweaker.FMLLoadingPlugin*/
jar {
    from(configurations.embed.collect {
        it.isDirectory() ? it : zipTree(it)
    }) {
        // Excludes/Removes useless bloat files from the compiled jar.
        exclude 'dummyThing',
                'LICENSE.txt',
                'META-INF/MUMFREY.RSA',
                'META-INF/maven/**',
                'org/**/*.html'
    }
    manifest {
        attributes(
                'MixinConfigs': 'mixins.keystrokesmod.json',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0,
                "FMLCorePlugin": "keystrokesmod.client.mixin.MixinLoader",
                "ForceLoadAsMod": true,
                'FMLCorePluginContainsFMLMod': true,
                "ModSide": "CLIENT"
        )
    }
}

/*
shadowJar {
    manifest {
        attributes(
                'MixinConfigs': 'mixins.keystrokesmod.json',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0,
                "FMLCorePlugin": "keystrokesmod.client.mixin.Mixinloader",
                "ForceLoadAsMod": true,
                'FMLCorePluginContainsFMLMod': true,
                "ModSide": "CLIENT"
        )
    }
}

 */

/*
reobf {
    shadowJar {} // Reobfuscate the shadowed JAR
}

 */

